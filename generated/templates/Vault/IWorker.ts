// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class IWorker extends ethereum.SmartContract {
  static bind(address: Address): IWorker {
    return new IWorker("IWorker", address);
  }

  baseToken(): Address {
    let result = super.call("baseToken", "baseToken():(address)", []);

    return result[0].toAddress();
  }

  try_baseToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("baseToken", "baseToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  farmingToken(): Address {
    let result = super.call("farmingToken", "farmingToken():(address)", []);

    return result[0].toAddress();
  }

  try_farmingToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("farmingToken", "farmingToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getPath(): Array<Address> {
    let result = super.call("getPath", "getPath():(address[])", []);

    return result[0].toAddressArray();
  }

  try_getPath(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall("getPath", "getPath():(address[])", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getReversedPath(): Array<Address> {
    let result = super.call(
      "getReversedPath",
      "getReversedPath():(address[])",
      []
    );

    return result[0].toAddressArray();
  }

  try_getReversedPath(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getReversedPath",
      "getReversedPath():(address[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getRewardPath(): Array<Address> {
    let result = super.call("getRewardPath", "getRewardPath():(address[])", []);

    return result[0].toAddressArray();
  }

  try_getRewardPath(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getRewardPath",
      "getRewardPath():(address[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  health(id: BigInt): BigInt {
    let result = super.call("health", "health(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);

    return result[0].toBigInt();
  }

  try_health(id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("health", "health(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lpToken(): Address {
    let result = super.call("lpToken", "lpToken():(address)", []);

    return result[0].toAddress();
  }

  try_lpToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("lpToken", "lpToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class LiquidateCall extends ethereum.Call {
  get inputs(): LiquidateCall__Inputs {
    return new LiquidateCall__Inputs(this);
  }

  get outputs(): LiquidateCall__Outputs {
    return new LiquidateCall__Outputs(this);
  }
}

export class LiquidateCall__Inputs {
  _call: LiquidateCall;

  constructor(call: LiquidateCall) {
    this._call = call;
  }

  get id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class LiquidateCall__Outputs {
  _call: LiquidateCall;

  constructor(call: LiquidateCall) {
    this._call = call;
  }
}

export class ReinvestCall extends ethereum.Call {
  get inputs(): ReinvestCall__Inputs {
    return new ReinvestCall__Inputs(this);
  }

  get outputs(): ReinvestCall__Outputs {
    return new ReinvestCall__Outputs(this);
  }
}

export class ReinvestCall__Inputs {
  _call: ReinvestCall;

  constructor(call: ReinvestCall) {
    this._call = call;
  }
}

export class ReinvestCall__Outputs {
  _call: ReinvestCall;

  constructor(call: ReinvestCall) {
    this._call = call;
  }
}

export class SetReinvestorOkCall extends ethereum.Call {
  get inputs(): SetReinvestorOkCall__Inputs {
    return new SetReinvestorOkCall__Inputs(this);
  }

  get outputs(): SetReinvestorOkCall__Outputs {
    return new SetReinvestorOkCall__Outputs(this);
  }
}

export class SetReinvestorOkCall__Inputs {
  _call: SetReinvestorOkCall;

  constructor(call: SetReinvestorOkCall) {
    this._call = call;
  }

  get reinvestor(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get isOk(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetReinvestorOkCall__Outputs {
  _call: SetReinvestorOkCall;

  constructor(call: SetReinvestorOkCall) {
    this._call = call;
  }
}

export class SetStrategyOkCall extends ethereum.Call {
  get inputs(): SetStrategyOkCall__Inputs {
    return new SetStrategyOkCall__Inputs(this);
  }

  get outputs(): SetStrategyOkCall__Outputs {
    return new SetStrategyOkCall__Outputs(this);
  }
}

export class SetStrategyOkCall__Inputs {
  _call: SetStrategyOkCall;

  constructor(call: SetStrategyOkCall) {
    this._call = call;
  }

  get strats(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get isOk(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetStrategyOkCall__Outputs {
  _call: SetStrategyOkCall;

  constructor(call: SetStrategyOkCall) {
    this._call = call;
  }
}

export class WorkCall extends ethereum.Call {
  get inputs(): WorkCall__Inputs {
    return new WorkCall__Inputs(this);
  }

  get outputs(): WorkCall__Outputs {
    return new WorkCall__Outputs(this);
  }
}

export class WorkCall__Inputs {
  _call: WorkCall;

  constructor(call: WorkCall) {
    this._call = call;
  }

  get id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get user(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get debt(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class WorkCall__Outputs {
  _call: WorkCall;

  constructor(call: WorkCall) {
    this._call = call;
  }
}
